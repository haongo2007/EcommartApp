// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Shops {

  id Int @id @default(autoincrement())

  logo String?

  picture String?

  template String?

  phone String?

  email String?

  domain String? @unique

  partner Int?

  code String?

  language String?

  timezone String?

  currency String?

  status Int? @default(0)

  active Int? @default(0)

  site_name String? @unique

  short_name String? @unique

  favicon String?

  description ShopDescriptions[]

  address ShopAddress[]

  categories ShopCategories[]

  configs ShopConfig[]

  banner ShopBanner[]

  languages ShopLanguage[]

  currencies ShopCurrency[]

  products ShopProduct[]

  ratings ShopProductRating[]

  promotions ShopProductPromotion[]

  carts ShopCustomerCart[]

  customer ShopCustomer[]

  brand ShopBrand[]

  supplier ShopSupplier[]

  measure ShopMeasure[]

  attribute_group ShopAttributeGroup[]

  createdAt DateTime @default(now())

  updatedAt DateTime? @updatedAt

  @@map("ef_shops")
}

model ShopDescriptions {

  id Int @id @default(autoincrement())

  lang String?

  title String?

  description String?

  keyword String?

  maintain_content String?

  store_id Int

  maintain_note String?

  shop Shops @relation(fields: [store_id], references: [id])

  @@map("ef_shops_description")
}

model ShopAddress {

  id Int @id @default(autoincrement())

  phone String?

  address String?

  street String?

  ward_name String?

  district_name String?

  province_name String?

  ward Int?

  district String?

  province String?

  country String?

  office String?

  warehouse String?

  store_id Int

  pickup Int?

  shop Shops @relation(fields: [store_id], references: [id])

  @@map("ef_shops_address")
}

model ShopCategories {

  id Int @id @default(autoincrement())

  store_id Int

  icon String?

  alias String?

  image String?

  parent Int @default(0)

  child_list String?

  has_child Int @default(0)

  top Int @default(0)

  deep Int @default(0)

  status Int @default(0)

  sort Int @default(0)

  description ShopCategoriesDescription[]

  product ShopProductCategories[]

  shop Shops @relation(fields: [store_id], references: [id])

  @@map("ef_shops_categories")
}

model ShopCategoriesDescription {

  id Int @id @default(autoincrement())

  category_id Int

  lang String?

  title String?

  keyword String?

  description String?

  category ShopCategories @relation(fields: [category_id], references: [id])

  @@map("ef_shops_categories_description")
}

model ShopConfig {

  id Int @id @default(autoincrement())

  group String?

  code String?

  key String?

  value Int @default(0)

  store_id Int

  store_name String

  sort Int @default(0)

  detail String?

  shop Shops @relation(fields: [store_id], references: [id])

  @@map("ef_shops_config")
}

model ShopBanner {

  id Int @id @default(autoincrement())

  title String?

  subtitle String?

  buttonName String?

  description String? @db.Text

  image String?

  url String?

  target String?

  html String? @db.Text

  status Int @default(0)

  sort Int @default(0)

  clicked Int @default(0)

  type String

  store_id Int

  shop Shops @relation(fields: [store_id], references: [id])

  createdAt DateTime @default(now())

  updatedAt DateTime? @updatedAt

  @@map("ef_shops_banner")
}

model ShopBrand {

  id Int @id @default(autoincrement())

  slug String

  name String?

  image String? @db.Text

  store_id Int

  status Int @default(0)

  products ShopProduct[]

  shop Shops @relation(fields: [store_id], references: [id])

  @@map("ef_shops_brand")
}

model ShopSupplier {

  id Int @id @default(autoincrement())

  slug String

  name String?

  email String?

  phone String?

  address String?

  image String? @db.Text

  store_id Int

  status Int @default(0)

  products ShopProduct[]

  shop Shops @relation(fields: [store_id], references: [id])

  @@map("ef_shops_supplier")
}

model ShopMeasure {

  id Int @id @default(autoincrement())

  code String?

  name String?

  store_id Int

  status Int @default(0)

  type String?

  shop Shops @relation(fields: [store_id], references: [id])

  @@map("ef_shops_length")
}

model ShopAttributeGroup {

  id Int @id @default(autoincrement())

  name String?

  store_id Int

  status Int @default(0)

  type String?

  multiple Int @default(0)

  shop Shops @relation(fields: [store_id], references: [id])

  attribute ShopProductAttribute[]

  @@map("ef_shops_attribute_group")
}

model ShopLanguage {

  id Int @id @default(autoincrement())

  name String?

  code String?

  flag String?

  status Int @default(0)

  sort Int @default(0)

  store_id Int?

  shop Shops? @relation(fields: [store_id], references: [id])

  @@map("ef_shops_language")
}

model ShopCurrency {

  id Int @id @default(autoincrement())

  name String?

  code String?

  symbol String?

  exchange_rate Decimal @db.Decimal(12, 2)

  round_thousand Int @db.TinyInt

  precision Int @db.TinyInt

  symbol_first Int @db.TinyInt

  thousand String?

  status Int @default(0)

  sort Int @default(0)

  store_id Int?

  shop Shops? @relation(fields: [store_id], references: [id])

  @@map("ef_shops_currency")
}

model ShopProductGroup {

  id Int @id @default(autoincrement())

  product_id Int

  @@map("ef_shops_product_group")
}

model ShopProduct {

  id Int @id @default(autoincrement())

  sku String?

  slug String?

  upc String?

  ean String?

  jan String?

  isbn String?

  mpn String?

  images String?

  brand_id Int

  supplier_id Int

  price Decimal @db.Decimal(12, 2)

  cost Decimal @db.Decimal(12, 2)

  stock Int? @default(0)

  sold Int? @default(0)

  minimum Int?

  weight_class String?

  length_class String?

  weight Int?

  length Int?

  width Int?

  height Int?

  kind Int @default(1) @db.TinyInt

  property String @default("physical")

  tax_id Int?

  status Int @default(0) @db.TinyInt

  sort Int @default(0)

  view Int? @default(0)

  rate_point Int? @default(0)

  rate_count Int? @default(0)

  store_id Int

  store_name String

  date_available DateTime? @db.Date()

  shop Shops @relation(fields: [store_id], references: [id])

  description ShopProductDescription[]

  promotion ShopProductPromotion[]

  ratings ShopProductRating[]

  categories ShopProductCategories[]

  carts ShopCustomerCart[]

  attribute ShopProductAttribute[]

  brand ShopBrand @relation(fields: [brand_id], references: [id])

  supplier ShopSupplier @relation(fields: [supplier_id], references: [id])

  createdAt DateTime @default(now())

  updatedAt DateTime? @updatedAt

  @@index([brand_id, store_id, tax_id, kind, supplier_id, view])
  @@map("ef_shops_product")
}

model ShopProductDescription {

  id Int @id @default(autoincrement())

  product_id Int

  lang String

  name String?

  keyword String? @db.Text

  description String? @db.Text

  content String? @db.Text

  product ShopProduct @relation(fields: [product_id], references: [id])

  @@index([product_id])
  @@map("ef_shops_product_description")
}

model ShopProductAttribute {

  id Int @id @default(autoincrement())

  name String?

  images String?

  attribute_group_id Int

  product_id Int

  child_list String?

  parent Int @default(0)

  price Decimal @db.Decimal(12, 2)

  qty Float

  status Int @default(0)

  product ShopProduct @relation(fields: [product_id], references: [id])

  attribute_group ShopAttributeGroup @relation(fields: [attribute_group_id], references: [id])

  @@map("ef_shops_product_attribute")
}

model ShopProductPromotion {

  id Int @id @default(autoincrement())

  product_id Int

  store_id Int

  store_name String

  promo_type String @default("normal")

  stock Int @default(1)

  sold Int @default(0)

  discount_percent Float

  dateStart DateTime? @db.DateTime()

  dateEnd DateTime? @db.DateTime()

  status Int @default(0) @db.TinyInt

  sort Int @default(1)

  product ShopProduct @relation(fields: [product_id], references: [id])

  shop Shops @relation(fields: [store_id], references: [id])

  createdAt DateTime @default(now())

  updatedAt DateTime? @updatedAt

  @@index([product_id, store_id])
  @@map("ef_shops_product_promotion")
}

model ShopProductCategories {

  product_id Int

  category_id Int

  product ShopProduct @relation(fields: [product_id], references: [id])

  category ShopCategories @relation(fields: [category_id], references: [id])

  assignedAt DateTime @default(now())

  assignedBy String

  @@id([product_id, category_id])
  @@map("ef_shops_product_category")
}

model ShopProductRating {

  id Int @id @default(autoincrement())

  product_id Int

  store_id Int

  customer_id Int

  name String

  point Int

  comment String

  status Int @default(0) @db.TinyInt

  createdAt DateTime @default(now())

  updatedAt DateTime? @updatedAt

  product ShopProduct @relation(fields: [product_id], references: [id])

  shop Shops @relation(fields: [store_id], references: [id])

  @@index([product_id, store_id, customer_id])
  @@map("ef_shops_product_rating")
}

model ShopCustomer {

  id String @id @default(cuid())

  first_name String?

  last_name String?

  email String @unique

  sex String?

  birthday DateTime? @db.DateTime()

  password String?

  postcode Int?

  phone String?

  company String?

  store_id Int

  facebook_auth String?

  google_auth String?

  remember_token String?

  avatar String? @db.Text

  status Int @default(1) @db.TinyInt

  email_verify_at DateTime? @db.DateTime()

  createdAt DateTime @default(now())

  updatedAt DateTime? @updatedAt

  shop Shops @relation(fields: [store_id], references: [id])

  address ShopCustomerAddress[]

  carts ShopCustomerCart[]

  accounts ShopAccount[]

  sessions ShopSession[]

  @@map("ef_shops_customer")
}

model ShopCustomerAddress {

  id Int @id @default(autoincrement())

  province_id String?

  district_id String?

  ward_id String?

  country_code String?

  address String?

  street String?

  province_name String?

  district_name String?

  ward_name String?

  country_name String?

  customer_id String

  customer ShopCustomer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@map("ef_shops_customer_address")
}

model ShopCustomerCart {

  id String @id @default(uuid())

  customer_id String

  product_id Int

  store_id Int

  qty Decimal @db.Decimal(12, 2)

  variant String? @db.Text

  customer ShopCustomer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  product ShopProduct @relation(fields: [product_id], references: [id], onDelete: Cascade)

  shop Shops @relation(fields: [store_id], references: [id], onDelete: Cascade)

  @@map("ef_shops_customer_cart")
}

model ShopAccount {

  id String @id @default(cuid())

  customer_id String

  type String

  provider String

  providerAccountId String

  refresh_token String? @db.Text

  access_token String? @db.Text

  expires_at Int?

  token_type String?

  scope String?

  id_token String? @db.Text

  session_state String?

  customer ShopCustomer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("ef_shops_account")
}

model ShopSession {

  id String @id @default(cuid())

  sessionToken String @unique

  customer_id String

  expires DateTime

  customer ShopCustomer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@map("ef_shops_session")
}

model ShopVerificationToken {

  identifier String

  token String @unique

  expires DateTime

  @@unique([identifier, token])
  @@map("ef_shops_verification_token")
}
